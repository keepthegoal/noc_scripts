#!/bin/bash
# set -x
# Hello man
# Checking version to install jq
if [[ `uname -a | awk '{print $1}'` =~ .*FreeBSD.* ]];then
        echo Found FreeBSD installation.
        echo Installing jq...
        if [ ! -d "/etc/bin/jq" ]; then
                echo Installing wget
                cd /tmp
                pkg install -y -f wget
                pkg update -y -f
                pkg install jq
                make -C /usr/ports/textproc/jq install clean
        else
                echo jq installation found!
                echo Skipping...
        fi
elif [[ `cat /etc/*-release | head -1` =~ .*CentOS.* || `cat /etc/*-release | head -1` =~ .*CloudLinux.* ]]; then
        echo Found CentOS installation.
        echo Installing jq...
        if [ ! -f "/etc/bin/jq" ]; then
                yum install epel-release -y
                yum install jq -y
                jq --version
        else
                echo jq installation found!
                echo Skipping...
        fi
elif [[ `cat /etc/*-release | head -1` =~ .*Ubuntu.* ]] || [[ `cat /etc/*-release | head -1` =~ .*Debian.* ]] || [[ `cat /proc/version` =~ .*Debian.* ]]; then
        echo Found Ubuntu/Debian installation.
        echo Installing jq...
        if [ ! -d "/etc/bin/jq" ]; then
                echo Installing apt-get install....
                sudo apt-get install jq
        else
                echo jq installation found!
                echo Skipping...
        fi
else
        echo No known Linux installation found.
        echo Exiting...
        exit
fi

# Take IP list
ip_list=($(netstat -anp | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f1 | sort | uniq | sort -n) \
$(journalctl -u ssh*.service -r -n 75 2>/dev/null | egrep "Failed|Failure" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | sort -n) \
$(tail -75 /var/log/nginx/access[_.]log 2>/dev/null | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | sort -n) \
$(tail -75 /var/log/apache2/access[_.]log 2>/dev/null | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | sort -n) \
$(tail -75 /var/log/apache/access[_.]log 2>/dev/null | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | sort -n) \
$(tail -75 /var/log/httpd/access[_.]log 2>/dev/null | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | sort -n))

# Api Keys List
KEYS=(c36378bd1532f9d99dcea56fcd49d24529edc2ab5ec9f9643ef6a152bc5a2c2c55315dd8ce54e977 \
211b1c0b46a7b81364ff873fbca8bb72c302031c23dcc9a76f844371d618b7f15cf7689a049aeb8e \
3dc79f39270d2b52955c0f234f840bdf31285f7dca7afbec057c41a56b7658b679a31b7eb8bd1a84 \
eed84038faec9879b3fa266cd6e75a5bdb4167ca2e873e34f0247b85ae4ceb341e7cb211210f7806 \
6c56cbb189837bb1ef6f70b00ccefa1caf8b379bf35b3c039418f065386b29f21739969954ec890d) 
key_num=0

# Function of checking IP by Abuse IP
function check_ip {
       curl -G -s https://api.abuseipdb.com/api/v2/check \
         --data-urlencode "ipAddress=${ip_list[$i]}" \
         -d maxAgeInDays=2 \
         -d verbose \
         -H "Key: ${KEYS[key_num]}" \
         -H "Accept: application/json"
	}

for i in ${!ip_list[@]}
    do
	printf '=%.0s' {1..35}
	printf "\nChecking ${ip_list[$i]} ...\n"
	check=$(check_ip)
	confidence=`echo $check | jq .data.abuseConfidenceScore `
		while [ "$confidence" == "null" ] && [ $key_num -lt "${#KEYS[@]}" ] #Accounts rotation check
		do
			echo "$(tput setaf 1)Switching to next API key$(tput sgr 0)"
			key_num=$(( $key_num + 1 ))
			check=$(check_ip)
			confidence=`echo $check | jq .data.abuseConfidenceScore `
		done
		if [ "$confidence" == "null" ] #Fail of rotation(no more accounts)
		 then
			 echo "Accounts for script ended =( "
			 break
		fi
	domain=`echo $check | jq .data.domain `
	country=`echo $check | jq .data.countryName `
	echo "This IP have $(tput bold)$confidence$(tput sgr 0) confidence of abuse"
		if [ $confidence -ge 30 ] && [ $domain != "google.com" ] && [ $domain != "cloudflare.com" ]
		 then
			echo "Attack from "$country""
			if [ -e /usr/sbin/csf ] ;
			 then
				2>/dev/null 1>&2 sudo csf -d ${ip_list[$i]}
				echo "IP ${ip_list[$i]} was added to csf.deny"
			 else
				2>/dev/null 1>&2 sudo iptables -A INPUT -s ${ip_list[$i]} -j DROP
				echo "IP ${ip_list[$i]} was added to iptables"
			fi
		fi
	done
if [ -e /usr/sbin/csf ] 
 then
	2>/dev/null 1>&2 sudo csf -r 
	echo "CSF has been restarted"
fi 
echo "Completed"
exit
